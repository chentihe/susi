syntax = "proto3";

package auth;

option go_package = "github.com/tihe/susi-proto/auth";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "common/common.proto";

service AuthService {
    rpc Register(RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/api/v1/auth/register"
            body: "*"
        };
    }
    rpc Login(LoginRequest) returns (LoginResponse);
    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
    rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
    rpc Logout(LogoutRequest) returns (LogoutResponse);

    // Admin specific operations
    rpc CreateAdmin(CreateAdminRequest) returns (CreateAdminResponse);
    rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
    rpc UpdateUserRole(UpdateUserRoleRequest) returns (UpdateUserRoleResponse);
    rpc DeactivateUser(DeactivateUserRequest) returns (DeactivateUserResponse);
}

enum UserRole {
    USER = 0;
    ADMIN = 1;
    SUPER_ADMIN = 2;
}

enum UserStatus {
    ACTIVE = 0;
    INACTIVE = 1;
    SUSPENDED = 2;
}

message UserInfo {
    string user_id = 1;
    string email = 2;
    string name = 3;
    string phone = 4;
    UserRole role = 5;
    UserStatus status = 6;
    repeated string permissions = 7;
    google.protobuf.Timestamp created_at = 8;
    google.protobuf.Timestamp last_login = 9;
}

message TokenInfo {
    string access_token = 1;
    string refresh_token = 2;
    google.protobuf.Timestamp expires_at = 3;
}

message RegisterRequest {
    string email = 1;
    string password = 2;
    string name = 3;
    string phone = 4;
    UserRole role = 5;
}

message RegisterResponse {
    UserInfo user = 1;
    TokenInfo tokens = 2;
    common.ResponseStatus status = 3;
}

message LoginRequest {
    string email = 1;
    string password = 2;
    UserRole expected_role = 3; //Optional: specify if admin login expected
}

message LoginResponse {
    UserInfo user = 1;
    TokenInfo tokens = 2;
    common.ResponseStatus status = 3;
}

message RefreshTokenRequest {
    string refresh_token = 1;
}

message RefreshTokenResponse {
    TokenInfo tokens = 1;
    common.ResponseStatus status = 2;
}

message ValidateTokenRequest {
    string token = 1;
    repeated string required_permissions = 2; // Optional: check specific permissions
}

message ValidateTokenResponse {
    bool valid = 1;
    UserInfo user = 2;
    common.ResponseStatus status = 3;
}

message LogoutRequest {
    string token = 1;
}

message LogoutResponse {
    common.ResponseStatus status = 1;
}

// Admin-specific messages
message CreateAdminRequest {
    string email = 1;
    string password = 2;
    string name = 3;
    string phone = 4;
    UserRole role = 5; // ADMIN or SUPER_ADMIN
    string created_by = 6; // Admin ID who creates this admin
}

message CreateAdminResponse {
    UserInfo admin = 1;
    common.ResponseStatus status = 2;
}

message ListUsersRequest {
    int32 page = 1;
    int32 limit = 2;
    UserRole role_filter = 3; // Optional: filter by role
    UserStatus status_filter = 4; // Optional: filter by status
}

message ListUsersResponse {
    repeated UserInfo users = 1;
    common.PaginationInfo pagination = 2;
    common.ResponseStatus status = 3;
}

message UpdateUserRoleRequest {
    string user_id = 1;
    UserRole new_role = 2;
    string updated_by = 3; // Admin ID who updates
}

message UpdateUserRoleResponse {
    common.ResponseStatus status = 2;
}

message DeactivateUserRequest {
    string user_id = 1;
    UserStatus new_status = 2; // INACTIVE or SUSPENDED
    string reason = 3;
    string updated_by = 4;
}

message DeactivateUserResponse {
    common.ResponseStatus status = 2;
}