// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/auth/auth.proto

package auth

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AuthService service

type AuthService interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*RefreshTokenResponse, error)
	ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...client.CallOption) (*ValidateTokenResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error)
	// Admin specific operations
	CreateAdmin(ctx context.Context, in *CreateAdminRequest, opts ...client.CallOption) (*CreateAdminResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...client.CallOption) (*ListUsersResponse, error)
	UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...client.CallOption) (*UpdateUserRoleResponse, error)
	DeactivateUser(ctx context.Context, in *DeactivateUserRequest, opts ...client.CallOption) (*DeactivateUserResponse, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) Register(ctx context.Context, in *RegisterRequest, opts ...client.CallOption) (*RegisterResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.Register", in)
	out := new(RegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) RefreshToken(ctx context.Context, in *RefreshTokenRequest, opts ...client.CallOption) (*RefreshTokenResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.RefreshToken", in)
	out := new(RefreshTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ValidateToken(ctx context.Context, in *ValidateTokenRequest, opts ...client.CallOption) (*ValidateTokenResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.ValidateToken", in)
	out := new(ValidateTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Logout(ctx context.Context, in *LogoutRequest, opts ...client.CallOption) (*LogoutResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.Logout", in)
	out := new(LogoutResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CreateAdmin(ctx context.Context, in *CreateAdminRequest, opts ...client.CallOption) (*CreateAdminResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CreateAdmin", in)
	out := new(CreateAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...client.CallOption) (*ListUsersResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.ListUsers", in)
	out := new(ListUsersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, opts ...client.CallOption) (*UpdateUserRoleResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.UpdateUserRole", in)
	out := new(UpdateUserRoleResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) DeactivateUser(ctx context.Context, in *DeactivateUserRequest, opts ...client.CallOption) (*DeactivateUserResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.DeactivateUser", in)
	out := new(DeactivateUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceHandler interface {
	Register(context.Context, *RegisterRequest, *RegisterResponse) error
	Login(context.Context, *LoginRequest, *LoginResponse) error
	RefreshToken(context.Context, *RefreshTokenRequest, *RefreshTokenResponse) error
	ValidateToken(context.Context, *ValidateTokenRequest, *ValidateTokenResponse) error
	Logout(context.Context, *LogoutRequest, *LogoutResponse) error
	// Admin specific operations
	CreateAdmin(context.Context, *CreateAdminRequest, *CreateAdminResponse) error
	ListUsers(context.Context, *ListUsersRequest, *ListUsersResponse) error
	UpdateUserRole(context.Context, *UpdateUserRoleRequest, *UpdateUserRoleResponse) error
	DeactivateUser(context.Context, *DeactivateUserRequest, *DeactivateUserResponse) error
}

func RegisterAuthServiceHandler(s server.Server, hdlr AuthServiceHandler, opts ...server.HandlerOption) error {
	type authService interface {
		Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		RefreshToken(ctx context.Context, in *RefreshTokenRequest, out *RefreshTokenResponse) error
		ValidateToken(ctx context.Context, in *ValidateTokenRequest, out *ValidateTokenResponse) error
		Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error
		CreateAdmin(ctx context.Context, in *CreateAdminRequest, out *CreateAdminResponse) error
		ListUsers(ctx context.Context, in *ListUsersRequest, out *ListUsersResponse) error
		UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, out *UpdateUserRoleResponse) error
		DeactivateUser(ctx context.Context, in *DeactivateUserRequest, out *DeactivateUserResponse) error
	}
	type AuthService struct {
		authService
	}
	h := &authServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthService{h}, opts...))
}

type authServiceHandler struct {
	AuthServiceHandler
}

func (h *authServiceHandler) Register(ctx context.Context, in *RegisterRequest, out *RegisterResponse) error {
	return h.AuthServiceHandler.Register(ctx, in, out)
}

func (h *authServiceHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.AuthServiceHandler.Login(ctx, in, out)
}

func (h *authServiceHandler) RefreshToken(ctx context.Context, in *RefreshTokenRequest, out *RefreshTokenResponse) error {
	return h.AuthServiceHandler.RefreshToken(ctx, in, out)
}

func (h *authServiceHandler) ValidateToken(ctx context.Context, in *ValidateTokenRequest, out *ValidateTokenResponse) error {
	return h.AuthServiceHandler.ValidateToken(ctx, in, out)
}

func (h *authServiceHandler) Logout(ctx context.Context, in *LogoutRequest, out *LogoutResponse) error {
	return h.AuthServiceHandler.Logout(ctx, in, out)
}

func (h *authServiceHandler) CreateAdmin(ctx context.Context, in *CreateAdminRequest, out *CreateAdminResponse) error {
	return h.AuthServiceHandler.CreateAdmin(ctx, in, out)
}

func (h *authServiceHandler) ListUsers(ctx context.Context, in *ListUsersRequest, out *ListUsersResponse) error {
	return h.AuthServiceHandler.ListUsers(ctx, in, out)
}

func (h *authServiceHandler) UpdateUserRole(ctx context.Context, in *UpdateUserRoleRequest, out *UpdateUserRoleResponse) error {
	return h.AuthServiceHandler.UpdateUserRole(ctx, in, out)
}

func (h *authServiceHandler) DeactivateUser(ctx context.Context, in *DeactivateUserRequest, out *DeactivateUserResponse) error {
	return h.AuthServiceHandler.DeactivateUser(ctx, in, out)
}
