// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/admin/admin.proto

package admin

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	client "go-micro.dev/v5/client"
	server "go-micro.dev/v5/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AdminService service

type AdminService interface {
	CreateAdmin(ctx context.Context, in *CreateAdminRequest, opts ...client.CallOption) (*CreateAdminResponse, error)
	GetAdmin(ctx context.Context, in *GetAdminRequest, opts ...client.CallOption) (*GetAdminResponse, error)
	UpdateAdmin(ctx context.Context, in *UpdateAdminRequest, opts ...client.CallOption) (*UpdateAdminResponse, error)
	DeleteAdmin(ctx context.Context, in *DeleteAdminRequest, opts ...client.CallOption) (*DeleteAdminResponse, error)
	ListAdmins(ctx context.Context, in *ListAdminsRequest, opts ...client.CallOption) (*ListAdminsResponse, error)
}

type adminService struct {
	c    client.Client
	name string
}

func NewAdminService(name string, c client.Client) AdminService {
	return &adminService{
		c:    c,
		name: name,
	}
}

func (c *adminService) CreateAdmin(ctx context.Context, in *CreateAdminRequest, opts ...client.CallOption) (*CreateAdminResponse, error) {
	req := c.c.NewRequest(c.name, "AdminService.CreateAdmin", in)
	out := new(CreateAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminService) GetAdmin(ctx context.Context, in *GetAdminRequest, opts ...client.CallOption) (*GetAdminResponse, error) {
	req := c.c.NewRequest(c.name, "AdminService.GetAdmin", in)
	out := new(GetAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminService) UpdateAdmin(ctx context.Context, in *UpdateAdminRequest, opts ...client.CallOption) (*UpdateAdminResponse, error) {
	req := c.c.NewRequest(c.name, "AdminService.UpdateAdmin", in)
	out := new(UpdateAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminService) DeleteAdmin(ctx context.Context, in *DeleteAdminRequest, opts ...client.CallOption) (*DeleteAdminResponse, error) {
	req := c.c.NewRequest(c.name, "AdminService.DeleteAdmin", in)
	out := new(DeleteAdminResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminService) ListAdmins(ctx context.Context, in *ListAdminsRequest, opts ...client.CallOption) (*ListAdminsResponse, error) {
	req := c.c.NewRequest(c.name, "AdminService.ListAdmins", in)
	out := new(ListAdminsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdminService service

type AdminServiceHandler interface {
	CreateAdmin(context.Context, *CreateAdminRequest, *CreateAdminResponse) error
	GetAdmin(context.Context, *GetAdminRequest, *GetAdminResponse) error
	UpdateAdmin(context.Context, *UpdateAdminRequest, *UpdateAdminResponse) error
	DeleteAdmin(context.Context, *DeleteAdminRequest, *DeleteAdminResponse) error
	ListAdmins(context.Context, *ListAdminsRequest, *ListAdminsResponse) error
}

func RegisterAdminServiceHandler(s server.Server, hdlr AdminServiceHandler, opts ...server.HandlerOption) error {
	type adminService interface {
		CreateAdmin(ctx context.Context, in *CreateAdminRequest, out *CreateAdminResponse) error
		GetAdmin(ctx context.Context, in *GetAdminRequest, out *GetAdminResponse) error
		UpdateAdmin(ctx context.Context, in *UpdateAdminRequest, out *UpdateAdminResponse) error
		DeleteAdmin(ctx context.Context, in *DeleteAdminRequest, out *DeleteAdminResponse) error
		ListAdmins(ctx context.Context, in *ListAdminsRequest, out *ListAdminsResponse) error
	}
	type AdminService struct {
		adminService
	}
	h := &adminServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AdminService{h}, opts...))
}

type adminServiceHandler struct {
	AdminServiceHandler
}

func (h *adminServiceHandler) CreateAdmin(ctx context.Context, in *CreateAdminRequest, out *CreateAdminResponse) error {
	return h.AdminServiceHandler.CreateAdmin(ctx, in, out)
}

func (h *adminServiceHandler) GetAdmin(ctx context.Context, in *GetAdminRequest, out *GetAdminResponse) error {
	return h.AdminServiceHandler.GetAdmin(ctx, in, out)
}

func (h *adminServiceHandler) UpdateAdmin(ctx context.Context, in *UpdateAdminRequest, out *UpdateAdminResponse) error {
	return h.AdminServiceHandler.UpdateAdmin(ctx, in, out)
}

func (h *adminServiceHandler) DeleteAdmin(ctx context.Context, in *DeleteAdminRequest, out *DeleteAdminResponse) error {
	return h.AdminServiceHandler.DeleteAdmin(ctx, in, out)
}

func (h *adminServiceHandler) ListAdmins(ctx context.Context, in *ListAdminsRequest, out *ListAdminsResponse) error {
	return h.AdminServiceHandler.ListAdmins(ctx, in, out)
}
