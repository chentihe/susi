version: '3.8'

services:
  # Consul Service Discovery
  consul:
      image: hashicorp/consul:latest
      ports:
        - "8500:8500"  # HTTP API and UI
        - "8600:8600/udp"  # DNS interface
      command: agent -server -bootstrap-expect=1 -node=consul-server -ui -client=0.0.0.0 -bind=0.0.0.0
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8500/v1/status/leader"]
        interval: 5s
        retries: 5
      networks:
        - susi-network

  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - susi-network

  # Kafka (KRaft Mode - No Zookeeper Required)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,CONTROLLER://0.0.0.0:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: 4L6g3nShT-eMCtK--X86sw
    volumes:
      - kafka_data:/tmp/kraft-combined-logs
    networks:
      - susi-network

  # Auth Service
  auth-service:
    build:
      context: .
      dockerfile: ./services/auth/Dockerfile
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    environment:
      DB_HOST: postgres
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      CONSUL_SERVER_URL: ${CONSUL_SERVER_URL}
      SERVICE_NAME: ${AUTH_SERVICE_NAME}
      SERVICE_PORT: ${AUTH_SERVICE_PORT}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      postgres:
        condition: service_started
      kafka:
        condition: service_started
      consul:
        condition: service_healthy
    networks:
      - susi-network

  # # Property Service
  # property-service:
  #   build:
  #     context: .
  #     dockerfile: ./services/property/Dockerfile
  #   ports:
  #     - "${PROPERTY_SERVICE_PORT}:${PROPERTY_SERVICE_PORT}"
  #   environment:
  #     DB_HOST: postgres
  #     DB_PORT: ${DB_PORT}
  #     DB_NAME: ${DB_NAME}
  #     DB_USER: ${DB_USER}
  #     DB_PASSWORD: ${DB_PASSWORD}
  #     KAFKA_BROKERS: ${KAFKA_BROKERS}
  #     SERVICE_NAME: ${PROPERTY_SERVICE_NAME}
  #     SERVICE_PORT: ${PROPERTY_SERVICE_PORT}
  #   depends_on:
  #     - postgres
  #     - kafka
  #     - eureka-server
  #   networks:
  #     - susi-network

  # # Tenant Service
  # tenant-service:
  #   build:
  #     context: .
  #     dockerfile: ./services/tenant/Dockerfile
  #   ports:
  #     - "${TENANT_SERVICE_PORT}:${TENANT_SERVICE_PORT}"
  #   environment:
  #     DB_HOST: postgres
  #     DB_PORT: ${DB_PORT}
  #     DB_NAME: ${DB_NAME}
  #     DB_USER: ${DB_USER}
  #     DB_PASSWORD: ${DB_PASSWORD}
  #     KAFKA_BROKERS: ${KAFKA_BROKERS}
  #     SERVICE_NAME: ${TENANT_SERVICE_NAME}
  #     SERVICE_PORT: ${TENANT_SERVICE_PORT}
  #   depends_on:
  #     - postgres
  #     - kafka
  #     - eureka-server
  #   networks:
  #     - susi-network

  # # Renovation Service
  # renovation-service:
  #   build:
  #     context: .
  #     dockerfile: ./services/renovation/Dockerfile
  #   ports:
  #     - "${RENOVATION_SERVICE_PORT}:${RENOVATION_SERVICE_PORT}"
  #   environment:
  #     DB_HOST: postgres
  #     DB_PORT: ${DB_PORT}
  #     DB_NAME: ${DB_NAME}
  #     DB_USER: ${DB_USER}
  #     DB_PASSWORD: ${DB_PASSWORD}
  #     KAFKA_BROKERS: ${KAFKA_BROKERS}
  #     SERVICE_NAME: ${RENOVATION_SERVICE_NAME}
  #     SERVICE_PORT: ${RENOVATION_SERVICE_PORT}
  #   depends_on:
  #     - postgres
  #     - kafka
  #     - eureka-server
  #   networks:
  #     - susi-network

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: ./gateway/Dockerfile
    ports:
      - "${GATEWAY_PORT}:${GATEWAY_PORT}"
    environment:
      CONSUL_SERVER_URL: ${CONSUL_SERVER_URL}
      AUTH_SERVICE_NAME: ${AUTH_SERVICE_NAME}
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_started
      kafka:
        condition: service_started
      consul:
        condition: service_healthy
      auth-service:
        condition: service_started
      
    networks:
      - susi-network

volumes:
  postgres_data:
  kafka_data:

networks:
  susi-network:
    driver: bridge 